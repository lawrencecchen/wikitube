/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/answers": {
    get: {
      parameters: {
        query: {
          answer_id?: parameters["rowFilter.answers.answer_id"];
          question_id?: parameters["rowFilter.answers.question_id"];
          upvotes?: parameters["rowFilter.answers.upvotes"];
          downvotes?: parameters["rowFilter.answers.downvotes"];
          unsafe_body?: parameters["rowFilter.answers.unsafe_body"];
          inserted_at?: parameters["rowFilter.answers.inserted_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["answers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** answers */
          answers?: definitions["answers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          answer_id?: parameters["rowFilter.answers.answer_id"];
          question_id?: parameters["rowFilter.answers.question_id"];
          upvotes?: parameters["rowFilter.answers.upvotes"];
          downvotes?: parameters["rowFilter.answers.downvotes"];
          unsafe_body?: parameters["rowFilter.answers.unsafe_body"];
          inserted_at?: parameters["rowFilter.answers.inserted_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          answer_id?: parameters["rowFilter.answers.answer_id"];
          question_id?: parameters["rowFilter.answers.question_id"];
          upvotes?: parameters["rowFilter.answers.upvotes"];
          downvotes?: parameters["rowFilter.answers.downvotes"];
          unsafe_body?: parameters["rowFilter.answers.unsafe_body"];
          inserted_at?: parameters["rowFilter.answers.inserted_at"];
        };
        body: {
          /** answers */
          answers?: definitions["answers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/posts": {
    get: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.posts.post_id"];
          parent_id?: parameters["rowFilter.posts.parent_id"];
          title?: parameters["rowFilter.posts.title"];
          unsafe_body?: parameters["rowFilter.posts.unsafe_body"];
          inserted_at?: parameters["rowFilter.posts.inserted_at"];
          post_type?: parameters["rowFilter.posts.post_type"];
          video_id?: parameters["rowFilter.posts.video_id"];
          author_id?: parameters["rowFilter.posts.author_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["posts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** posts */
          posts?: definitions["posts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.posts.post_id"];
          parent_id?: parameters["rowFilter.posts.parent_id"];
          title?: parameters["rowFilter.posts.title"];
          unsafe_body?: parameters["rowFilter.posts.unsafe_body"];
          inserted_at?: parameters["rowFilter.posts.inserted_at"];
          post_type?: parameters["rowFilter.posts.post_type"];
          video_id?: parameters["rowFilter.posts.video_id"];
          author_id?: parameters["rowFilter.posts.author_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.posts.post_id"];
          parent_id?: parameters["rowFilter.posts.parent_id"];
          title?: parameters["rowFilter.posts.title"];
          unsafe_body?: parameters["rowFilter.posts.unsafe_body"];
          inserted_at?: parameters["rowFilter.posts.inserted_at"];
          post_type?: parameters["rowFilter.posts.post_type"];
          video_id?: parameters["rowFilter.posts.video_id"];
          author_id?: parameters["rowFilter.posts.author_id"];
        };
        body: {
          /** posts */
          posts?: definitions["posts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/posts_with_votes": {
    get: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.posts_with_votes.post_id"];
          parent_id?: parameters["rowFilter.posts_with_votes.parent_id"];
          title?: parameters["rowFilter.posts_with_votes.title"];
          unsafe_body?: parameters["rowFilter.posts_with_votes.unsafe_body"];
          inserted_at?: parameters["rowFilter.posts_with_votes.inserted_at"];
          post_type?: parameters["rowFilter.posts_with_votes.post_type"];
          video_id?: parameters["rowFilter.posts_with_votes.video_id"];
          votes?: parameters["rowFilter.posts_with_votes.votes"];
          user_vote?: parameters["rowFilter.posts_with_votes.user_vote"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["posts_with_votes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          inserted_at?: parameters["rowFilter.profiles.inserted_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          inserted_at?: parameters["rowFilter.profiles.inserted_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          inserted_at?: parameters["rowFilter.profiles.inserted_at"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/questions": {
    get: {
      parameters: {
        query: {
          question_id?: parameters["rowFilter.questions.question_id"];
          title?: parameters["rowFilter.questions.title"];
          unsafe_body?: parameters["rowFilter.questions.unsafe_body"];
          video_id?: parameters["rowFilter.questions.video_id"];
          inserted_at?: parameters["rowFilter.questions.inserted_at"];
          upvotes?: parameters["rowFilter.questions.upvotes"];
          downvotes?: parameters["rowFilter.questions.downvotes"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["questions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** questions */
          questions?: definitions["questions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          question_id?: parameters["rowFilter.questions.question_id"];
          title?: parameters["rowFilter.questions.title"];
          unsafe_body?: parameters["rowFilter.questions.unsafe_body"];
          video_id?: parameters["rowFilter.questions.video_id"];
          inserted_at?: parameters["rowFilter.questions.inserted_at"];
          upvotes?: parameters["rowFilter.questions.upvotes"];
          downvotes?: parameters["rowFilter.questions.downvotes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          question_id?: parameters["rowFilter.questions.question_id"];
          title?: parameters["rowFilter.questions.title"];
          unsafe_body?: parameters["rowFilter.questions.unsafe_body"];
          video_id?: parameters["rowFilter.questions.video_id"];
          inserted_at?: parameters["rowFilter.questions.inserted_at"];
          upvotes?: parameters["rowFilter.questions.upvotes"];
          downvotes?: parameters["rowFilter.questions.downvotes"];
        };
        body: {
          /** questions */
          questions?: definitions["questions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/votes": {
    get: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.votes.user_id"];
          post_id?: parameters["rowFilter.votes.post_id"];
          value?: parameters["rowFilter.votes.value"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["votes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** votes */
          votes?: definitions["votes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.votes.user_id"];
          post_id?: parameters["rowFilter.votes.post_id"];
          value?: parameters["rowFilter.votes.value"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.votes.user_id"];
          post_id?: parameters["rowFilter.votes.post_id"];
          value?: parameters["rowFilter.votes.value"];
        };
        body: {
          /** votes */
          votes?: definitions["votes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/handle_new_user": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: any };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  answers: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    answer_id: number;
    /**
     * Note:
     * This is a Foreign Key to `questions.question_id`.<fk table='questions' column='question_id'/>
     */
    question_id: number;
    upvotes: number;
    downvotes: number;
    unsafe_body: string;
    inserted_at: string;
  };
  posts: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    post_id: number;
    /**
     * Note:
     * This is a Foreign Key to `posts.post_id`.<fk table='posts' column='post_id'/>
     */
    parent_id?: number;
    title?: string;
    unsafe_body: string;
    inserted_at: string;
    post_type: "question" | "answer";
    video_id: string;
    /**
     * Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    author_id: string;
  };
  posts_with_votes: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    post_id?: number;
    /**
     * Note:
     * This is a Foreign Key to `posts.post_id`.<fk table='posts' column='post_id'/>
     */
    parent_id?: number;
    title?: string;
    unsafe_body?: string;
    inserted_at?: string;
    post_type?: "question" | "answer";
    video_id?: string;
    votes?: number;
    user_vote?: number;
  };
  profiles: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    updated_at?: string;
    username?: string;
    avatar_url?: string;
    website?: string;
    inserted_at: string;
  };
  questions: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    question_id: number;
    title: string;
    unsafe_body: string;
    video_id: string;
    inserted_at: string;
    upvotes: number;
    downvotes: number;
  };
  votes: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    user_id: string;
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `posts.post_id`.<fk table='posts' column='post_id'/>
     */
    post_id: number;
    value?: number;
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** answers */
  "body.answers": definitions["answers"];
  "rowFilter.answers.answer_id": string;
  "rowFilter.answers.question_id": string;
  "rowFilter.answers.upvotes": string;
  "rowFilter.answers.downvotes": string;
  "rowFilter.answers.unsafe_body": string;
  "rowFilter.answers.inserted_at": string;
  /** posts */
  "body.posts": definitions["posts"];
  "rowFilter.posts.post_id": string;
  "rowFilter.posts.parent_id": string;
  "rowFilter.posts.title": string;
  "rowFilter.posts.unsafe_body": string;
  "rowFilter.posts.inserted_at": string;
  "rowFilter.posts.post_type": string;
  "rowFilter.posts.video_id": string;
  "rowFilter.posts.author_id": string;
  /** posts_with_votes */
  "body.posts_with_votes": definitions["posts_with_votes"];
  "rowFilter.posts_with_votes.post_id": string;
  "rowFilter.posts_with_votes.parent_id": string;
  "rowFilter.posts_with_votes.title": string;
  "rowFilter.posts_with_votes.unsafe_body": string;
  "rowFilter.posts_with_votes.inserted_at": string;
  "rowFilter.posts_with_votes.post_type": string;
  "rowFilter.posts_with_votes.video_id": string;
  "rowFilter.posts_with_votes.votes": string;
  "rowFilter.posts_with_votes.user_vote": string;
  /** profiles */
  "body.profiles": definitions["profiles"];
  "rowFilter.profiles.id": string;
  "rowFilter.profiles.updated_at": string;
  "rowFilter.profiles.username": string;
  "rowFilter.profiles.avatar_url": string;
  "rowFilter.profiles.website": string;
  "rowFilter.profiles.inserted_at": string;
  /** questions */
  "body.questions": definitions["questions"];
  "rowFilter.questions.question_id": string;
  "rowFilter.questions.title": string;
  "rowFilter.questions.unsafe_body": string;
  "rowFilter.questions.video_id": string;
  "rowFilter.questions.inserted_at": string;
  "rowFilter.questions.upvotes": string;
  "rowFilter.questions.downvotes": string;
  /** votes */
  "body.votes": definitions["votes"];
  "rowFilter.votes.user_id": string;
  "rowFilter.votes.post_id": string;
  "rowFilter.votes.value": string;
}

export interface operations {}

export interface external {}
